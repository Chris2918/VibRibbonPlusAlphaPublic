# editorconfig.org

# top-most EditorConfig file
root = true

# Default settings:
# A newline ending every file
# Use 4 spaces as indentation
[*]
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true

[project.json]
indent_size = 2

# Generated code
[*{_AssemblyInfo.cs,.notsupported.cs}]
generated_code = true

# C# files
[*.cs]
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning

# avoid this. unless absolutely necessary
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

# Types: use keywords instead of BCL types, and permit var only when the type is clear
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = false:warning
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# name all constant fields using PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds   = field
dotnet_naming_symbols.constant_fields.required_modifiers = const
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# static fields should have s_ prefix
dotnet_naming_rule.static_fields_should_have_prefix.severity = warning
dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields
dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style
dotnet_naming_symbols.static_fields.applicable_kinds   = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected
dotnet_naming_style.static_prefix_style.required_prefix = s_
dotnet_naming_style.static_prefix_style.capitalization = camel_case

# internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = warning
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# Code style defaults
csharp_using_directive_placement = outside_namespace:warning
dotnet_sort_system_directives_first = true
csharp_prefer_braces = false:warning
csharp_preserve_single_line_blocks = true:warning
csharp_preserve_single_line_statements = false:warning
csharp_prefer_static_local_function = true:warning
csharp_prefer_simple_using_statement = false:warning
csharp_style_prefer_switch_expression = true:warning

# Code quality
dotnet_style_readonly_field = true:none
dotnet_code_quality_unused_parameters = non_public:warning

# Expression-level preferences
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning
csharp_prefer_simple_default_expression = true:warning

# Expression-bodied members
csharp_style_expression_bodied_methods = true:warning
csharp_style_expression_bodied_constructors = true:warning
csharp_style_expression_bodied_operators = true:warning
csharp_style_expression_bodied_properties = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_lambdas = true:warning
csharp_style_expression_bodied_local_functions = true:warning

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_inlined_variable_declaration = true:warning

# Null checking preferences
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning

# Other features
csharp_style_prefer_index_operator = false:warning
csharp_style_prefer_range_operator = false:warning
csharp_style_pattern_local_over_anonymous_function = false:warning

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Analyzers
dotnet_code_quality.CA1052.api_surface = private, internal
dotnet_code_quality.CA1802.api_surface = private, internal
dotnet_code_quality.CA1822.api_surface = private, internal
dotnet_code_quality.CA2208.api_surface = public

# C++ Files

# HAA0502: Explicit new reference type allocation
dotnet_diagnostic.HAA0502.severity = none

# HAA0101: Array allocation for params parameter
dotnet_diagnostic.HAA0101.severity = none

# HAA0102: Non-overridden virtual method call on value type
dotnet_diagnostic.HAA0102.severity = none

# HAA0201: Implicit string concatenation allocation
dotnet_diagnostic.HAA0201.severity = none

# HAA0202: Value type to reference type conversion allocation for string concatenation
dotnet_diagnostic.HAA0202.severity = none

# HAA0301: Closure Allocation Source
dotnet_diagnostic.HAA0301.severity = none

# HAA0302: Display class allocation to capture closure
dotnet_diagnostic.HAA0302.severity = none

# HAA0303: Lambda or anonymous method in a generic method allocates a delegate instance
dotnet_diagnostic.HAA0303.severity = none

# HAA0401: Possible allocation of reference type enumerator
dotnet_diagnostic.HAA0401.severity = none

# HAA0501: Explicit new array type allocation
dotnet_diagnostic.HAA0501.severity = none

# HAA0503: Explicit new anonymous object allocation
dotnet_diagnostic.HAA0503.severity = none

# HAA0504: Implicit new array creation allocation
dotnet_diagnostic.HAA0504.severity = none

# HAA0505: Initializer reference type allocation
dotnet_diagnostic.HAA0505.severity = none

# HAA0506: Let clause induced allocation
dotnet_diagnostic.HAA0506.severity = none

# HAA0601: Value type to reference type conversion causing boxing allocation
dotnet_diagnostic.HAA0601.severity = none

# HAA0602: Delegate on struct instance caused a boxing allocation
dotnet_diagnostic.HAA0602.severity = none

# HAA0603: Delegate allocation from a method group
dotnet_diagnostic.HAA0603.severity = none

# HAA0604: Delegate allocation from a method group
dotnet_diagnostic.HAA0604.severity = none

# SA1627: Documentation text should not be empty
dotnet_diagnostic.SA1627.severity = none

# MA0001: StringComparison is missing
dotnet_diagnostic.MA0001.severity = none

# MA0002: IEqualityComparer<string> or IComparer<string> is missing
dotnet_diagnostic.MA0002.severity = none

# MA0003: Add argument name to improve readability
dotnet_diagnostic.MA0003.severity = none

# MA0004: Use Task.ConfigureAwait(false)
dotnet_diagnostic.MA0004.severity = none

# MA0005: Use Array.Empty<T>()
dotnet_diagnostic.MA0005.severity = none

# MA0006: Use String.Equals instead of equality operator
dotnet_diagnostic.MA0006.severity = none

# MA0007: Add a comma after the last value
dotnet_diagnostic.MA0007.severity = none

# MA0008: Add StructLayoutAttribute
dotnet_diagnostic.MA0008.severity = none

# MA0009: Add regex evaluation timeout
dotnet_diagnostic.MA0009.severity = none

# MA0010: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.MA0010.severity = none

# MA0011: IFormatProvider is missing
dotnet_diagnostic.MA0011.severity = none

# MA0012: Do not raise reserved exception type
dotnet_diagnostic.MA0012.severity = none

# MA0013: Types should not extend System.ApplicationException
dotnet_diagnostic.MA0013.severity = none

# MA0014: Do not raise System.ApplicationException type
dotnet_diagnostic.MA0014.severity = none

# MA0015: Specify the parameter name in ArgumentException
dotnet_diagnostic.MA0015.severity = none

# MA0016: Prefer return collection abstraction instead of implementation
dotnet_diagnostic.MA0016.severity = none

# MA0017: Abstract types should not have public or internal constructors
dotnet_diagnostic.MA0017.severity = none

# MA0018: Do not declare static members on generic types
dotnet_diagnostic.MA0018.severity = none

# MA0019: Use EventArgs.Empty
dotnet_diagnostic.MA0019.severity = none

# MA0020: Use direct methods instead of LINQ methods
dotnet_diagnostic.MA0020.severity = none

# MA0021: Use StringComparer.GetHashCode instead of string.GetHashCode
dotnet_diagnostic.MA0021.severity = none

# MA0022: Return Task.FromResult instead of returning null
dotnet_diagnostic.MA0022.severity = none

# MA0023: Add RegexOptions.ExplicitCapture
dotnet_diagnostic.MA0023.severity = none

# MA0024: Use an explicit StringComparer when possible
dotnet_diagnostic.MA0024.severity = none

# MA0025: Implement the functionality instead of throwing NotImplementedException
dotnet_diagnostic.MA0025.severity = none

# MA0026: Fix TODO comment
dotnet_diagnostic.MA0026.severity = none

# MA0027: Do not remove original exception
dotnet_diagnostic.MA0027.severity = none

# MA0028: Optimize StringBuilder usage
dotnet_diagnostic.MA0028.severity = none

# MA0029: Combine LINQ methods
dotnet_diagnostic.MA0029.severity = none

# MA0030: Remove useless OrderBy call
dotnet_diagnostic.MA0030.severity = none

# MA0031: Optimize Enumerable.Count() usage
dotnet_diagnostic.MA0031.severity = none

# MA0032: Use an overload with a CancellationToken argument
dotnet_diagnostic.MA0032.severity = none

# MA0033: Do not tag instance fields with ThreadStaticAttribute
dotnet_diagnostic.MA0033.severity = none

# MA0035: Do not use dangerous threading methods
dotnet_diagnostic.MA0035.severity = none

# MA0036: Make class static
dotnet_diagnostic.MA0036.severity = none

# MA0037: Remove empty statement
dotnet_diagnostic.MA0037.severity = none

# MA0038: Make method static
dotnet_diagnostic.MA0038.severity = none

# MA0039: Do not write your own certificate validation method
dotnet_diagnostic.MA0039.severity = none

# MA0040: Flow the cancellation token
dotnet_diagnostic.MA0040.severity = none

# MA0041: Make property static
dotnet_diagnostic.MA0041.severity = none

# MA0042: Do not use blocking calls in an async method
dotnet_diagnostic.MA0042.severity = none

# MA0043: Use nameof operator in ArgumentException
dotnet_diagnostic.MA0043.severity = none

# MA0044: Remove useless ToString call
dotnet_diagnostic.MA0044.severity = none

# MA0045: Do not use blocking call in a sync method (need to make containing method async)
dotnet_diagnostic.MA0045.severity = none

# MA0046: Use EventHandler<T> to declare events
dotnet_diagnostic.MA0046.severity = none

# MA0047: Declare types in namespaces
dotnet_diagnostic.MA0047.severity = none

# MA0048: File name must match type name
dotnet_diagnostic.MA0048.severity = none

# MA0049: Type name should not match containing namespace
dotnet_diagnostic.MA0049.severity = none

# MA0050: Validate arguments correctly in iterator methods
dotnet_diagnostic.MA0050.severity = none

# MA0051: Method is too long
dotnet_diagnostic.MA0051.severity = none

# MA0052: Replace constant Enum.ToString with nameof
dotnet_diagnostic.MA0052.severity = none

# MA0053: Make class sealed
dotnet_diagnostic.MA0053.severity = none

# MA0054: Embed the caught exception as innerException
dotnet_diagnostic.MA0054.severity = none

# MA0055: Do not use finalizer
dotnet_diagnostic.MA0055.severity = none

# MA0056: Do not call overridable members in constructor
dotnet_diagnostic.MA0056.severity = none

# MA0057: Class name should end with 'Attribute'
dotnet_diagnostic.MA0057.severity = none

# MA0058: Class name should end with 'Exception'
dotnet_diagnostic.MA0058.severity = none

# MA0059: Class name should end with 'EventArgs'
dotnet_diagnostic.MA0059.severity = none

# MA0060: The value returned by Stream.Read/Stream.ReadAsync is not used
dotnet_diagnostic.MA0060.severity = none

# MA0061: Method overrides should not change parameter defaults
dotnet_diagnostic.MA0061.severity = none

# MA0062: Non-flags enums should not be marked with "FlagsAttribute"
dotnet_diagnostic.MA0062.severity = none

# MA0063: Use Where before OrderBy
dotnet_diagnostic.MA0063.severity = none

# MA0064: Avoid locking on publicly accessible instance
dotnet_diagnostic.MA0064.severity = none

# MA0065: Default ValueType.Equals or HashCode is used for struct's equality
dotnet_diagnostic.MA0065.severity = none

# MA0066: Hash table unfriendly type is used in a hash table
dotnet_diagnostic.MA0066.severity = none

# MA0067: Use Guid.Empty
dotnet_diagnostic.MA0067.severity = none

# MA0068: Invalid parameter name for nullable attribute
dotnet_diagnostic.MA0068.severity = none

# MA0069: Non-constant static fields should not be visible
dotnet_diagnostic.MA0069.severity = none

# MA0070: Obsolete attributes should include explanations
dotnet_diagnostic.MA0070.severity = none

# MA0071: Avoid using redundant else
dotnet_diagnostic.MA0071.severity = none

# MA0072: Do not throw from a finally block
dotnet_diagnostic.MA0072.severity = none

# MA0073: Avoid comparison with bool constant
dotnet_diagnostic.MA0073.severity = none

# MA0074: Avoid implicit culture-sensitive methods
dotnet_diagnostic.MA0074.severity = none

# MA0075: Do not use implicit culture-sensitive ToString
dotnet_diagnostic.MA0075.severity = none

# MA0076: Do not use implicit culture-sensitive ToString in interpolated strings
dotnet_diagnostic.MA0076.severity = none

# MA0077: A class that provides Equals(T) should implement IEquatable<T>
dotnet_diagnostic.MA0077.severity = none

# MA0078: Use 'Cast' instead of 'Select' to cast
dotnet_diagnostic.MA0078.severity = none

# MA0079: Flow the cancellation token using .WithCancellation()
dotnet_diagnostic.MA0079.severity = none

# MA0080: Use a cancellation token using .WithCancellation()
dotnet_diagnostic.MA0080.severity = none

# MA0081: Method overrides should not omit params keyword
dotnet_diagnostic.MA0081.severity = none

# MA0082: NaN should not be used in comparisons
dotnet_diagnostic.MA0082.severity = none

# MA0083: ConstructorArgument parameters should exist in constructors
dotnet_diagnostic.MA0083.severity = none

# MA0084: Local variable should not hide other symbols
dotnet_diagnostic.MA0084.severity = none

# MA0085: Anonymous delegates should not be used to unsubscribe from Events
dotnet_diagnostic.MA0085.severity = none

# MA0086: Do not throw from a finalizer
dotnet_diagnostic.MA0086.severity = none

# MA0087: Parameters with [DefaultParameterValue] attributes should also be marked [Optional]
dotnet_diagnostic.MA0087.severity = none

# MA0088: Use [DefaultParameterValue] instead of [DefaultValue]
dotnet_diagnostic.MA0088.severity = none

# MA0089: Optimize string method usage
dotnet_diagnostic.MA0089.severity = none

# MA0090: Remove empty else/finally block
dotnet_diagnostic.MA0090.severity = none

# MA0091: Sender should be 'this' for instance events
dotnet_diagnostic.MA0091.severity = none

# MA0092: Sender should be 'null' for static events
dotnet_diagnostic.MA0092.severity = none

# MA0093: EventArgs should not be null
dotnet_diagnostic.MA0093.severity = none

# MA0094: A class that provides CompareTo(T) should implement IComparable<T>
dotnet_diagnostic.MA0094.severity = none

# MA0095: A class that implements IEquatable<T> should override Equals(object)
dotnet_diagnostic.MA0095.severity = none

# MA0096: A class that implements IComparable<T> should also implement IEquatable<T>
dotnet_diagnostic.MA0096.severity = none

# MA0097: A class that implements IComparable<T> or IComparable should override comparison operators
dotnet_diagnostic.MA0097.severity = none

# MA0098: Use indexer instead of LINQ methods
dotnet_diagnostic.MA0098.severity = none

# MA0099: Use Explicit enum value instead of 0
dotnet_diagnostic.MA0099.severity = none

# MA0100: Await task before disposing resources
dotnet_diagnostic.MA0100.severity = none

# MA0101: String contains an implicit end of line character
dotnet_diagnostic.MA0101.severity = none

# MA0102: Make member readonly
dotnet_diagnostic.MA0102.severity = none

# MA0103: Use SequenceEqual instead of equality operator
dotnet_diagnostic.MA0103.severity = none

# MA0104: Do not create a type with a name from the BCL
dotnet_diagnostic.MA0104.severity = none

# SA1309: Field names should not begin with underscore
dotnet_diagnostic.SA1309.severity = none

# SA1101: Prefix local calls with this
dotnet_diagnostic.SA1101.severity = none

# SA1407: Arithmetic expressions should declare precedence
dotnet_diagnostic.SA1407.severity = none

[*.{cpp,h,in}]
curly_bracket_next_line = true
indent_brace_style = Allman

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
indent_size = 2

[*.{csproj,vbproj,proj,nativeproj,locproj}]
charset = utf-8

# Xml build files
[*.builds]
indent_size = 2

# Xml files
[*.{xml,stylecop,resx,ruleset}]
indent_size = 2

# Xml config files
[*.{props,targets,config,nuspec}]
indent_size = 2

# YAML config files
[*.{yml,yaml}]
indent_size = 2

# Shell scripts
[*.sh]
end_of_line = lf
[*.{cmd,bat}]
end_of_line = crlf

# IDE0044: Add readonly modifier
dotnet_diagnostic.IDE0044.severity = none
